# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:14

# 設定 submodule 策略
variables:
  GIT_SUBMODULE_STRATEGY: recursive

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'      # 在 gitlab 網頁  CI/CD -> Run Pipeline 手動觸發
    - if: $CI_COMMIT_TAG                      # 有tag的時候

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - node_modules/

stages:
  - .pre
  - build
  - deploy
  
# build 之前，檔案的解析
# 轉換 webp 格式
pre_parse:
  stage: .pre
  script:
    - git submodule init
    - git submodule update --recursive --remote
    - npm install
    - npm run prepareFile
  artifacts:
    paths:
      - assets/

# build 階段，打包程式
build:
  stage: build
  script:
    - ./node_modules/.bin/webpack --config webpack.prod.js
    - node buildTool/buildFileParse.js "$LOG"
    - mv dist/Release "$CI_PROJECT_TITLE"       # 移動到根目錄下，方便artifacts下載的時候路徑簡單

  artifacts:
    name: "$CI_PROJECT_TITLE"
    paths:
      - "$CI_PROJECT_TITLE"

  dependencies:
    - pre_parse

# 手動trigger
# 推送至遠端 release
push-to-remote:
  stage: deploy
  rules:
    - when: manual

  dependencies:
    - build

  script:
    ##
    ## 準備 git 的環境
    ##
    # 安裝 ssh-agent
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    # 啟動 ssh-agent
    - eval $(ssh-agent -s)

    # 從CI/CD variables 裡面讀取 ssh key
    # 並用 ssh-add 用 ssh-agent 做代理
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    # 設定 ~/.ssh 權限
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # 掃描 gitlab 位置的 ssh key
    # 並輸出至 ~/.ssh/known_hosts
    - ssh-keyscan gitlab.msslot.bet >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # set git config
    - git config --global user.email $GITLAB_USER_EMAIL
    - git config --global user.name $GITLAB_USER_NAME

    # 設定 release 路徑
    - RELEASE_URL=git@$CI_SERVER_HOST:release/$CI_PROJECT_TITLE.git     # ProjectTitle = 'BNXX'
    - echo $RELEASE_URL
    # 從遠端 release 拉回來
    - git clone $RELEASE_URL dist
    - rm -rf dist/*
    - mv $CI_PROJECT_TITLE/* dist               # 把產出的所有檔案移至目標資料夾
    - touch "dist/version_$CI_COMMIT_TAG"       # 產出對應版號的檔案
    # push 回遠端 release
    - cd dist
    - git add .
    - git commit -am "[$CI_COMMIT_TAG] $CI_COMMIT_MESSAGE"     # 註解寫下專案名稱 和 tag 版本
    - git push origin master
